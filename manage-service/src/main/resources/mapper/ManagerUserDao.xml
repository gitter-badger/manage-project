<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2020-present quick-spring-boot All rights reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.quick.spring.boot.manage.dao.mapper.ManagerUserDao">
	<resultMap type="com.github.quick.spring.boot.manage.dao.entity.ManagerUser" id="ManagerUserMap">
		<result property="id" column="id" jdbcType="INTEGER"/>
		<result property="username" column="username" jdbcType="VARCHAR"/>
		<result property="password" column="password" jdbcType="VARCHAR"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		<result property="createUser" column="create_user" jdbcType="INTEGER"/>
		<result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
		<result property="updateUser" column="update_user" jdbcType="INTEGER"/>
		<result property="version" column="version" jdbcType="INTEGER"/>
		<result property="deleted" column="deleted" jdbcType="OTHER"/>
	</resultMap>

	<!--查询单个-->
	<select id="queryById" resultMap="ManagerUserMap">
		select
		id, username, password, create_time, create_user, update_time, update_user, version, deleted
		from manager.manager_user
		where id = #{id}
	</select>

	<!--查询指定行数据-->
	<select id="queryAllByLimit" resultMap="ManagerUserMap">
		select
		id, username, password, create_time, create_user, update_time, update_user, version, deleted
		from manager.manager_user
		limit #{offset}, #{limit}
	</select>

	<!--通过实体作为筛选条件查询-->
	<select id="queryAll" resultMap="ManagerUserMap">
		select
		id, username, password, create_time, create_user, update_time, update_user, version, deleted
		from manager.manager_user
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="username != null and username != ''">
				and username = #{username}
			</if>
			<if test="password != null and password != ''">
				and password = #{password}
			</if>
			<if test="createTime != null">
				and create_time = #{createTime}
			</if>
			<if test="createUser != null">
				and create_user = #{createUser}
			</if>
			<if test="updateTime != null">
				and update_time = #{updateTime}
			</if>
			<if test="updateUser != null">
				and update_user = #{updateUser}
			</if>
			<if test="version != null">
				and version = #{version}
			</if>
			<if test="deleted != null">
				and deleted = #{deleted}
			</if>
		</where>
	</select>

	<!--新增所有列-->
	<insert id="insert" keyProperty="id" useGeneratedKeys="true">
		insert into manager.manager_user(username, password, create_time, create_user, update_time, update_user,
		version, deleted)
		values (#{username}, #{password}, #{createTime}, #{createUser}, #{updateTime}, #{updateUser}, #{version},
		#{deleted})
	</insert>

	<insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
		insert into manager.manager_user(username, password, create_time, create_user, update_time, update_user,
		version, deleted)
		values
		<foreach collection="entities" item="entity" separator=",">
			(#{entity.username}, #{entity.password}, #{entity.createTime}, #{entity.createUser}, #{entity.updateTime},
			#{entity.updateUser}, #{entity.version}, #{entity.deleted})
		</foreach>
	</insert>

	<insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
		insert into manager.manager_user(username, password, create_time, create_user, update_time, update_user,
		version, deleted)
		values
		<foreach collection="entities" item="entity" separator=",">
			(#{entity.username}, #{entity.password}, #{entity.createTime}, #{entity.createUser}, #{entity.updateTime},
			#{entity.updateUser}, #{entity.version}, #{entity.deleted})
		</foreach>
		on duplicate key update
		username = values(username) , password = values(password) , create_time = values(create_time) , create_user =
		values(create_user) , update_time = values(update_time) , update_user = values(update_user) , version =
		values(version) , deleted = values(deleted)
	</insert>

	<!--通过主键修改数据-->
	<update id="update">
		update manager.manager_user
		<set>
			<if test="username != null and username != ''">
				username = #{username},
			</if>
			<if test="password != null and password != ''">
				password = #{password},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
			<if test="createUser != null">
				create_user = #{createUser},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime},
			</if>
			<if test="updateUser != null">
				update_user = #{updateUser},
			</if>
			<if test="version != null">
				version = #{version},
			</if>
			<if test="deleted != null">
				deleted = #{deleted},
			</if>
		</set>
		where id = #{id}
	</update>

	<!--通过主键删除-->
	<delete id="deleteById">
		delete from manager.manager_user where id = #{id}
	</delete>
</mapper>